// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TourismAPI.Data;

#nullable disable

namespace TourismAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250313232659_AddBookingProperties")]
    partial class AddBookingProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TourismAPI.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Adults")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Children")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Guests")
                        .HasColumnType("integer");

                    b.Property<bool>("IncludeInsurance")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeTransfer")
                        .HasColumnType("boolean");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TourismAPI.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Стандартный номер с двуспальной кроватью",
                            Name = "Стандартный",
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Улучшенный номер с видом на море",
                            Name = "Улучшенный",
                            PriceMultiplier = 1.3m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Люкс с отдельной гостиной",
                            Name = "Люкс",
                            PriceMultiplier = 1.8m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Семейный номер с двумя спальнями",
                            Name = "Семейный",
                            PriceMultiplier = 2.0m
                        });
                });

            modelBuilder.Entity("TourismAPI.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Exclusions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("HotelDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HotelStars")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Inclusions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsHot")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoomDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransferInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalInfo = "",
                            AvailableSeats = 20,
                            Country = "Турция",
                            CreatedAt = new DateTime(2025, 3, 13, 23, 26, 58, 571, DateTimeKind.Utc).AddTicks(6770),
                            DepartureDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Насладитесь прекрасным отдыхом на пляжах Турции с системой \"всё включено\".",
                            Destination = "",
                            Discount = 0m,
                            Duration = 7,
                            Exclusions = new List<string>(),
                            HotelDescription = "",
                            HotelName = "",
                            HotelStars = 0,
                            ImageUrl = "/images/tours/turkey-beach.jpg",
                            Inclusions = new List<string>(),
                            IsHot = true,
                            Location = "",
                            Name = "Пляжный отдых в Турции",
                            Price = 45000m,
                            Rating = 4.5,
                            ReturnDate = new DateTime(2024, 3, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoomDescription = "",
                            TransferInfo = "",
                            UpdatedAt = new DateTime(2025, 3, 13, 23, 26, 58, 571, DateTimeKind.Utc).AddTicks(6770)
                        },
                        new
                        {
                            Id = 2,
                            AdditionalInfo = "",
                            AvailableSeats = 15,
                            Country = "Италия",
                            CreatedAt = new DateTime(2025, 3, 13, 23, 26, 58, 572, DateTimeKind.Utc).AddTicks(2010),
                            DepartureDate = new DateTime(2024, 3, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Посетите главные достопримечательности Италии: Рим, Флоренцию, Венецию.",
                            Destination = "",
                            Discount = 0m,
                            Duration = 10,
                            Exclusions = new List<string>(),
                            HotelDescription = "",
                            HotelName = "",
                            HotelStars = 0,
                            ImageUrl = "/images/tours/italy-excursion.jpg",
                            Inclusions = new List<string>(),
                            IsHot = false,
                            Location = "",
                            Name = "Экскурсионный тур по Италии",
                            Price = 85000m,
                            Rating = 4.7999999999999998,
                            ReturnDate = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoomDescription = "",
                            TransferInfo = "",
                            UpdatedAt = new DateTime(2025, 3, 13, 23, 26, 58, 572, DateTimeKind.Utc).AddTicks(2010)
                        },
                        new
                        {
                            Id = 3,
                            AdditionalInfo = "",
                            AvailableSeats = 10,
                            Country = "Швейцария",
                            CreatedAt = new DateTime(2025, 3, 13, 23, 26, 58, 572, DateTimeKind.Utc).AddTicks(2010),
                            DepartureDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Идеальный зимний отдых на лучших горнолыжных курортах Швейцарии.",
                            Destination = "",
                            Discount = 0m,
                            Duration = 7,
                            Exclusions = new List<string>(),
                            HotelDescription = "",
                            HotelName = "",
                            HotelStars = 0,
                            ImageUrl = "/images/tours/swiss-ski.jpg",
                            Inclusions = new List<string>(),
                            IsHot = false,
                            Location = "",
                            Name = "Горнолыжный курорт в Альпах",
                            Price = 120000m,
                            Rating = 4.7000000000000002,
                            ReturnDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoomDescription = "",
                            TransferInfo = "",
                            UpdatedAt = new DateTime(2025, 3, 13, 23, 26, 58, 572, DateTimeKind.Utc).AddTicks(2020)
                        });
                });

            modelBuilder.Entity("TourismAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("User");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TourismAPI.Models.Booking", b =>
                {
                    b.HasOne("TourismAPI.Models.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourismAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourismAPI.Models.Tour", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
