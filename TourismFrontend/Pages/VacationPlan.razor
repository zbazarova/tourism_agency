@page "/vacation-plan"
@inject VacationPlanService PlanService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

<div class="container my-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>План отдыха</h2>
        @if (plan?.Items.Any() == true)
        {
            <button class="btn btn-outline-danger" @onclick="ClearPlan">
                <i class="bi bi-trash me-2"></i>Очистить план
            </button>
        }
    </div>

    @if (plan == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else if (!plan.Items.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-calendar-x display-1 text-muted"></i>
            <h3 class="mt-3">Ваш план отдыха пуст</h3>
            <p class="text-muted">Добавьте туры, которые вас интересуют</p>
            <a href="/tours" class="btn btn-primary mt-3">Посмотреть туры</a>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                @foreach (var item in plan.Items)
                {
                    <div class="card mb-3">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="@item.Tour.ImageUrl" class="img-fluid rounded-start" alt="@item.Tour.Name">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <h5 class="card-title">@item.Tour.Name</h5>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveItem(item.TourId)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                    <p class="card-text">@item.Tour.Description</p>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <small class="text-muted">
                                                <i class="bi bi-calendar"></i> @item.Tour.DepartureDate.ToString("dd.MM.yyyy") - @item.Tour.ReturnDate.ToString("dd.MM.yyyy")
                                            </small>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-people me-2"></i>
                                                <div class="input-group input-group-sm" style="width: 120px;">
                                                    <button class="btn btn-outline-secondary" type="button" 
                                                            @onclick="() => UpdatePeopleCount(item.TourId, item.NumberOfPeople - 1)"
                                                            disabled="@(item.NumberOfPeople <= 1)">
                                                        <i class="bi bi-dash"></i>
                                                    </button>
                                                    <input type="number" class="form-control text-center" 
                                                           value="@item.NumberOfPeople" 
                                                           @onchange="@(e => UpdatePeopleCount(item.TourId, int.Parse(e.Value?.ToString() ?? "1")))"
                                                           min="1" max="@item.Tour.AvailableSeats">
                                                    <button class="btn btn-outline-secondary" type="button" 
                                                            @onclick="() => UpdatePeopleCount(item.TourId, item.NumberOfPeople + 1)"
                                                            disabled="@(item.NumberOfPeople >= item.Tour.AvailableSeats)">
                                                        <i class="bi bi-plus"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-2">
                                        <span class="badge bg-info">@item.RoomType.Name</span>
                                        <span class="ms-2 fw-bold">@item.TotalPrice.ToString("C0")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Итого</h5>
                        <p class="display-6 mb-4">@plan.TotalPrice.ToString("C0")</p>
                        <button class="btn btn-primary w-100" @onclick="ProceedToBooking">
                            Перейти к бронированию
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Models.VacationPlan? plan;

    protected override async Task OnInitializedAsync()
    {
        plan = await PlanService.GetPlanAsync();
    }

    private async Task RemoveItem(int tourId)
    {
        await PlanService.RemoveItemAsync(tourId);
        plan = await PlanService.GetPlanAsync();
    }

    private async Task UpdatePeopleCount(int tourId, int newCount)
    {
        if (newCount < 1) return;
        
        var item = plan?.Items.FirstOrDefault(i => i.TourId == tourId);
        if (item == null) return;

        if (newCount > item.Tour.AvailableSeats)
        {
            ToastService.ShowWarning($"Доступно только {item.Tour.AvailableSeats} мест");
            return;
        }

        await PlanService.UpdateItemPeopleCountAsync(tourId, newCount);
        plan = await PlanService.GetPlanAsync();
    }

    private async Task ClearPlan()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите очистить план?");
        if (confirmed)
        {
            await PlanService.ClearPlanAsync();
            plan = await PlanService.GetPlanAsync();
            ToastService.ShowSuccess("План очищен");
        }
    }

    private void ProceedToBooking()
    {
        NavigationManager.NavigateTo("/booking");
    }
} 