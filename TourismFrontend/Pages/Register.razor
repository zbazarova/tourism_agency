@page "/register"
@using System.ComponentModel.DataAnnotations
@using TourismFrontend.Services
@using TourismFrontend.Models
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<PageTitle>Регистрация - Мир Путешествий</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Регистрация</h3>
                    
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label for="firstName" class="form-label">Имя</label>
                            <InputText id="firstName" @bind-Value="registerModel.FirstName" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.FirstName)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="lastName" class="form-label">Фамилия</label>
                            <InputText id="lastName" @bind-Value="registerModel.LastName" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.LastName)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" type="email" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Пароль</label>
                            <InputText id="password" @bind-Value="registerModel.Password" class="form-control" type="password" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Подтверждение пароля</label>
                            <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isRegistering">
                                @if (isRegistering)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Регистрация...</span>
                                }
                                else
                                {
                                    <span>Зарегистрироваться</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                    
                    <div class="text-center mt-3">
                        <p>Уже есть аккаунт? <a href="login">Войти</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool isRegistering = false;

    private async Task HandleRegistration()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            ToastService.ShowError("Пароли не совпадают");
            return;
        }

        isRegistering = true;
        try
        {
            var result = await AuthService.RegisterAsync(new UserRegisterDto
            {
                Email = registerModel.Email,
                Password = registerModel.Password,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName
            });

            if (result.IsSuccess)
            {
                ToastService.ShowSuccess("Регистрация успешно завершена");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                ToastService.ShowError($"Ошибка при регистрации: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Ошибка при регистрации: {ex.Message}");
        }
        finally
        {
            isRegistering = false;
        }
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Введите имя")]
        [StringLength(50, ErrorMessage = "Имя должно быть от {2} до {1} символов", MinimumLength = 2)]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Введите фамилию")]
        [StringLength(50, ErrorMessage = "Фамилия должна быть от {2} до {1} символов", MinimumLength = 2)]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Введите email")]
        [EmailAddress(ErrorMessage = "Некорректный формат email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Введите пароль")]
        [StringLength(100, ErrorMessage = "Пароль должен быть от {2} до {1} символов", MinimumLength = 6)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Подтвердите пароль")]
        [Compare("Password", ErrorMessage = "Пароли не совпадают")]
        public string ConfirmPassword { get; set; } = "";
    }
} 