@page "/admin/tours"
@using TourismFrontend.Models
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject TourService TourService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@attribute [Authorize(Roles = "Admin,Manager")]

<div class="container my-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Управление турами</h2>
        <button class="btn btn-primary" @onclick="() => ShowTourModal(null)">
            <i class="bi bi-plus-circle me-2"></i>Добавить тур
        </button>
    </div>

    @if (tours == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Название</th>
                        <th>Страна</th>
                        <th>Цена</th>
                        <th>Даты</th>
                        <th>Места</th>
                        <th>Статус</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tour in tours)
                    {
                        <tr>
                            <td>@tour.Name</td>
                            <td>@tour.Country</td>
                            <td>@tour.Price.ToString("C0")</td>
                            <td>@tour.DepartureDate.ToString("dd.MM.yyyy") - @tour.ReturnDate.ToString("dd.MM.yyyy")</td>
                            <td>@tour.AvailableSeats</td>
                            <td>
                                @if (tour.IsHot)
                                {
                                    <span class="badge bg-danger">Горящий</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ShowTourModal(tour)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTour(tour.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (showModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <EditForm Model="@currentTour">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">@(currentTour.Id == 0 ? "Добавить тур" : "Редактировать тур")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Название</label>
                                <InputText @bind-Value="currentTour.Name" class="form-control" />
                                <ValidationMessage For="@(() => currentTour.Name)" />
                            </div>
                            
                            <div class="col-md-6">
                                <label class="form-label">Страна</label>
                                <InputText @bind-Value="currentTour.Country" class="form-control" />
                                <ValidationMessage For="@(() => currentTour.Country)" />
                            </div>

                            <div class="col-md-12">
                                <label class="form-label">Описание</label>
                                <InputTextArea @bind-Value="currentTour.Description" class="form-control" rows="3" />
                                <ValidationMessage For="@(() => currentTour.Description)" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Цена</label>
                                <InputNumber @bind-Value="currentTour.Price" class="form-control" />
                                <ValidationMessage For="@(() => currentTour.Price)" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Количество мест</label>
                                <InputNumber @bind-Value="currentTour.AvailableSeats" class="form-control" />
                                <ValidationMessage For="@(() => currentTour.AvailableSeats)" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Дата отправления</label>
                                <InputDate @bind-Value="currentTour.DepartureDate" class="form-control" />
                                <ValidationMessage For="@(() => currentTour.DepartureDate)" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Дата возвращения</label>
                                <InputDate @bind-Value="currentTour.ReturnDate" class="form-control" />
                                <ValidationMessage For="@(() => currentTour.ReturnDate)" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Рейтинг</label>
                                <InputNumber @bind-Value="currentTour.Rating" class="form-control" step="0.1" />
                                <ValidationMessage For="@(() => currentTour.Rating)" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Изображение</label>
                                <div class="d-flex gap-3 align-items-start">
                                    <div class="flex-grow-1">
                                        <InputText class="form-control mb-2" 
                                                  @bind-Value="currentTour.ImageUrl" 
                                                  placeholder="URL изображения" />
                                        <div class="form-text">
                                            Оставьте поле пустым для использования изображения по умолчанию
                                        </div>
                                    </div>
                                    <div>
                                        <InputFile OnChange="HandleImageUpload" 
                                                  class="form-control" 
                                                  accept="image/*" />
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(currentTour.ImageUrl))
                                {
                                    <div class="mt-2">
                                        <img src="@currentTour.ImageUrl" 
                                             class="img-thumbnail" 
                                             style="max-height: 200px" 
                                             alt="Предпросмотр" />
                                    </div>
                                }
                            </div>

                            <div class="col-md-12">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="currentTour.IsHot" class="form-check-input" id="isHot" />
                                    <label class="form-check-label" for="isHot">Горящий тур</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <hr class="my-4">
                                <h5>Информация об отеле</h5>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Название отеля</label>
                                <InputText @bind-Value="currentTour.HotelName" class="form-control" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Количество звезд</label>
                                <InputSelect @bind-Value="currentTour.HotelStars" class="form-control">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <option value="@i">@(new string('⭐', i))</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="col-12">
                                <label class="form-label">Описание отеля</label>
                                <InputTextArea @bind-Value="currentTour.HotelDescription" class="form-control" rows="3"
                                              placeholder="Опишите особенности отеля, доступные удобства, инфраструктуру..." />
                            </div>

                            <div class="col-12">
                                <label class="form-label">Описание номеров</label>
                                <InputTextArea @bind-Value="currentTour.RoomDescription" class="form-control" rows="3"
                                              placeholder="Опишите типы номеров, их оснащение..." />
                            </div>

                            <div class="col-12">
                                <label class="form-label">Расположение</label>
                                <InputTextArea @bind-Value="currentTour.Location" class="form-control" rows="2"
                                              placeholder="Опишите расположение отеля, расстояние до моря, достопримечательностей..." />
                            </div>

                            <div class="col-12">
                                <hr class="my-4">
                                <h5>Дополнительная информация</h5>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Что включено (по одному на строку)</label>
                                <InputTextArea @bind-Value="inclusionsText" class="form-control" rows="6" 
                                              placeholder="Например:
✈️ Перелет
🏨 Проживание
🍽️ Питание all inclusive
🚌 Трансфер
📋 Страховка" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Что не включено (по одному на строку)</label>
                                <InputTextArea @bind-Value="exclusionsText" class="form-control" rows="6"
                                              placeholder="Например:
🎫 Виза
🏛️ Экскурсии
🍷 Напитки
💰 Чаевые
🎭 Развлечения" />
                            </div>

                            <div class="col-12">
                                <label class="form-label">Информация о трансфере</label>
                                <InputTextArea @bind-Value="currentTour.TransferInfo" class="form-control" rows="2"
                                              placeholder="Укажите детали трансфера, тип транспорта, время в пути..." />
                            </div>

                            <div class="col-12">
                                <label class="form-label">Дополнительная информация</label>
                                <InputTextArea @bind-Value="currentTour.AdditionalInfo" class="form-control" rows="3"
                                              placeholder="Любая дополнительная информация о туре, особые условия, рекомендации..." />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                        <button type="button" class="btn btn-primary" disabled="@isSaving" @onclick="async () => { if (!isSaving) await HandleValidSubmit(); }">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Сохранение...</span>
                            }
                            else
                            {
                                <span>Сохранить</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Tour>? tours;
    private Tour currentTour = new();
    private bool showModal;
    private string inclusionsText = "";
    private string exclusionsText = "";
    private IBrowserFile? selectedFile;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Инициализация страницы управления турами...");
        await LoadTours();
    }

    private async Task LoadTours()
    {
        Console.WriteLine("Загрузка списка туров...");
        tours = await TourService.GetToursAsync();
        Console.WriteLine($"Загружено {tours?.Count ?? 0} туров");
    }

    private void ShowTourModal(Tour? tour)
    {
        Console.WriteLine($"Открытие модального окна для {(tour == null ? "создания нового тура" : $"редактирования тура {tour.Id}")}");
        if (tour == null)
        {
            currentTour = new Tour();
            inclusionsText = "";
            exclusionsText = "";
        }
        else
        {
            currentTour = new Tour
            {
                Id = tour.Id,
                Name = tour.Name,
                Description = tour.Description,
                Country = tour.Country,
                Price = tour.Price,
                DepartureDate = tour.DepartureDate,
                ReturnDate = tour.ReturnDate,
                Duration = tour.Duration,
                AvailableSeats = tour.AvailableSeats,
                Rating = tour.Rating,
                IsHot = tour.IsHot,
                ImageUrl = tour.ImageUrl,
                Inclusions = tour.Inclusions,
                Exclusions = tour.Exclusions,
                HotelName = tour.HotelName,
                HotelStars = tour.HotelStars,
                HotelDescription = tour.HotelDescription,
                RoomDescription = tour.RoomDescription,
                Location = tour.Location,
                TransferInfo = tour.TransferInfo,
                AdditionalInfo = tour.AdditionalInfo
            };
            inclusionsText = string.Join("\n", tour.Inclusions);
            exclusionsText = string.Join("\n", tour.Exclusions);
        }
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentTour = new Tour();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        await Task.Run(() => selectedFile = e.File);
    }

    private async Task HandleValidSubmit()
    {
        if (isSaving) return; // Предотвращаем повторный вызов
        
        isSaving = true;
        try
        {
            Console.WriteLine("Начало обработки формы...");
            
            // Проверяем обязательные поля
            if (string.IsNullOrWhiteSpace(currentTour.Name))
            {
                ToastService.ShowError("Название тура обязательно");
                isSaving = false;
                return;
            }
            
            if (string.IsNullOrWhiteSpace(currentTour.Country))
            {
                ToastService.ShowError("Страна обязательна");
                isSaving = false;
                return;
            }
            
            if (string.IsNullOrWhiteSpace(currentTour.Description))
            {
                ToastService.ShowError("Описание обязательно");
                isSaving = false;
                return;
            }
            
            if (currentTour.Price <= 0)
            {
                ToastService.ShowError("Цена должна быть больше 0");
                isSaving = false;
                return;
            }
            
            if (currentTour.AvailableSeats <= 0)
            {
                ToastService.ShowError("Количество мест должно быть больше 0");
                isSaving = false;
                return;
            }
            
            // Проверяем, что дата возвращения не раньше даты отправления
            if (currentTour.ReturnDate < currentTour.DepartureDate)
            {
                ToastService.ShowError("Дата возвращения не может быть раньше даты отправления");
                isSaving = false;
                return;
            }
            
            // Автоматически рассчитываем длительность тура на основе дат
            currentTour.Duration = (int)(currentTour.ReturnDate - currentTour.DepartureDate).TotalDays + 1;
            
            // Проверяем, что длительность тура не превышает 365 дней
            if (currentTour.Duration > 365)
            {
                ToastService.ShowError("Длительность тура не может превышать 365 дней");
                isSaving = false;
                return;
            }
            
            // Если URL изображения пустой, используем изображение по умолчанию
            if (string.IsNullOrWhiteSpace(currentTour.ImageUrl))
            {
                currentTour.ImageUrl = "/images/default-tour.jpg";
            }

            // Обработка включенных и не включенных услуг
            currentTour.Inclusions = inclusionsText
                .Split('\n', StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim())
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .ToList();

            currentTour.Exclusions = exclusionsText
                .Split('\n', StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim())
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .ToList();

            // Проверяем, что токен авторизации установлен
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                ToastService.ShowError("Необходима авторизация. Пожалуйста, войдите в систему.");
                NavigationManager.NavigateTo("/login");
                isSaving = false;
                return;
            }

            if (currentTour.Id == 0)
            {
                Console.WriteLine("Создание нового тура...");
                Console.WriteLine($"Данные тура: {JsonSerializer.Serialize(currentTour)}");
                await TourService.CreateTourAsync(currentTour);
                ToastService.ShowSuccess("Тур успешно создан");
            }
            else
            {
                Console.WriteLine($"Обновление тура с ID {currentTour.Id}...");
                Console.WriteLine($"Данные тура: {JsonSerializer.Serialize(currentTour)}");
                await TourService.UpdateTourAsync(currentTour);
                ToastService.ShowSuccess("Тур успешно обновлен");
            }

            await LoadTours();
            showModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении тура: {ex.Message}");
            Console.WriteLine($"Стек вызовов: {ex.StackTrace}");
            ToastService.ShowError($"Ошибка: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                ToastService.ShowError("Необходима авторизация");
                return;
            }

            var file = e.File;
            var imageUrl = await TourService.UploadImageAsync(file.OpenReadStream(), file.Name);
            currentTour.ImageUrl = imageUrl;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Ошибка при загрузке изображения: {ex.Message}");
            
            // Если токен истек, перенаправляем на страницу входа
            if (ex.Message.Contains("Необходима авторизация"))
            {
                NavigationManager.NavigateTo("/login");
            }
        }
    }

    private async Task DeleteTour(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить этот тур?"))
        {
            try
            {
                await TourService.DeleteTourAsync(id);
                await LoadTours();
                ToastService.ShowSuccess("Тур успешно удален");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Ошибка при удалении тура: {ex.Message}");
            }
        }
    }
} 